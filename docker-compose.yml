version: "3.9"

services:
  # setup MongoDB cluster for production
  mongo-replica-setup:
    container_name: mongo-setup
    image: "mongo"
    restart: on-failure
    networks:
      - netApplication
    volumes:
      - ./.docker/mongodb/scripts/mongosetup.sh:/scripts/mongosetup.sh
    entrypoint: ["bash", "/scripts/mongosetup.sh"]
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - mongo4

  mongo1:
    hostname: "mongo1"
    container_name: "mongo1"
    image: "mongo"
    restart: "on-failure"
    command: [
        "mongod",
        # "-f",
        # "/etc/mongod.conf",
        "--port",
        "30001",
        "--keyFile",
        "/auth/file.key",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--bind_ip_all",
      ]
    expose:
      - 30001
    ports:
      - 30001:30001
    networks:
      - netApplication
    volumes:
      - mongoData1:/data/db
      - mongoLog1:/var/log/mongodb
      #   - ./.docker/mongodb/mongod.conf:/etc/mongod.conf
      - ./.docker/mongodb/initdb.d/:/docker-entrypoint-initdb.d/
      - ./.docker/mongodb/file.key:/auth/file.key
    healthcheck:
      test: echo 'rs.status().ok' | mongosh admin --port 30001 -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}

  mongo2:
    hostname: "mongo2"
    container_name: "mongo2"
    image: "mongo"
    command: [
        "mongod",
        # "-f",
        # "/etc/mongod.conf",
        "--port",
        "30002",
        "--keyFile",
        "/auth/file.key",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--bind_ip_all",
      ]
    restart: "on-failure"
    expose:
      - 30002
    ports:
      - 30002:30002
    networks:
      - netApplication
    volumes:
      - mongoData2:/data/db
      - mongoLog2:/var/log/mongodb
      #   - ./.docker/mongodb/mongod.conf:/etc/mongod.conf
      - ./.docker/mongodb/file.key:/auth/file.key
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo1

  mongo3:
    hostname: "mongo3"
    container_name: "mongo3"
    image: "mongo"
    command: [
        "mongod",
        # "-f",
        # "/etc/mongod.conf",
        "--port",
        "30003",
        "--keyFile",
        "/auth/file.key",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--bind_ip_all",
      ]
    restart: "on-failure"
    expose:
      - 30003
    ports:
      - 30003:30003
    networks:
      - netApplication
    volumes:
      - mongoData3:/data/db
      - mongoLog3:/var/log/mongodb
      #   - ./.docker/mongodb/mongod.conf:/etc/mongod.conf
      - ./.docker/mongodb/file.key:/auth/file.key
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo1

  mongo4:
    hostname: "mongo4"
    container_name: "mongo4"
    image: "mongo"
    command: [
        "mongod",
        # "-f",
        # "/etc/mongod.conf",
        "--port",
        "30004",
        "--keyFile",
        "/auth/file.key",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--bind_ip_all",
      ]
    restart: "on-failure"
    expose:
      - 30004
    ports:
      - 30004:30004
    networks:
      - netApplication
    volumes:
      - mongoData4:/data/db
      - mongoLog4:/var/log/mongodb
      #   - ./.docker/mongodb/mongod.conf:/etc/mongod.conf
      - ./.docker/mongodb/file.key:/auth/file.key
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo1
  api:
    build:
      context: ./Application
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "4000:4000"
    networks:
      - netApplication
    volumes:
      - ./Application:/src

volumes:
  mongoData1:
  mongoData2:
  mongoData3:
  mongoData4:
  mongoLog1:
  mongoLog2:
  mongoLog3:
  mongoLog4:

networks:
  netApplication:
